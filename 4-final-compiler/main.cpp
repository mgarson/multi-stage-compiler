// CS4280 Project 4
// Author: Maija Garson
// Date: 05/11/2025
// Description: Main program to implement scanning, parsing, static semantic checking, and assembly code generation of a given input.
// It processes command line arguments to determine input source, scans and tokenizes the input, builds a parse tree via recursive
// descent parsing, constructs the symbol table after static semantic checks, and generates the corresponding assembly code that matches 
// the UMSL school interpreter to an output file.

#include <stdio.h>

#include "parser.h"
#include "staticSemantic.h"
#include "symbolTable.h"
#include "codeGen.h"

int main(int argc, char *argv[])
{
	FILE* file = nullptr;
        // If only 1 argument on command line, read from standard input (keyboard)
	if (argc == 1)
	{
		file = stdin;
		setvbuf(stdin, NULL, _IONBF, BUFSIZ);
	}

        // If 2 arguments given, set file pointer to given file
        else if (argc == 2)
	{
		file = fopen(argv[1], "r");

		// If file is null, invalid file. Print error message and return
		if (file == nullptr)
		{
			fprintf(stderr, "Error: Could not open file %s\n", argv[1]);
			return 1;
		}
	}
        // Else not correct input on command line, print error message, usage, and return
        else
	{
		fprintf(stderr, "No file given.\nUsage: ./P4 <filename>\n");
		return 1;
	}
	
	// Call parser function to recursively create parse tree from given input
	Node* tree = parser(file);

	// Create symbol table and call function to recursively check semantics on tree and add variables
	// to symbol table if valid
	SymbolTable sTable;
	checkSemantics(tree, sTable);

	// Open output file to output assembly code, and ensure file is valid
	FILE *outAsm = fopen("output.asm", "w");
	if (!outAsm)
	{
		fprintf(stderr, "Error! Could not open output.asm for writing\n");
		return 1;
	}

	// Call code generation function to traverse the parse tree generated by the parser, and recursively generate assembly code to 
	// output file outAsm.
	codeGen(tree, outAsm, sTable);
	
	fclose(outAsm);

	// If file initially given, close file
	if (file != stdin)
		fclose(file);

	return 0;
}

